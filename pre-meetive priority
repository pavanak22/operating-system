#include <stdio.h>

struct Process {
    int id;         // Process ID
    int priority;   // Priority of the process
    int burst_time; // Burst time of the process
    int remaining_time; // Remaining burst time
};

// Function to find the process with the highest priority
int findHighestPriorityProcess(struct Process processes[], int n) {
    int highest_priority = -1;
    int highest_priority_idx = -1;

    for (int i = 0; i < n; i++) {
        if (processes[i].remaining_time > 0 && processes[i].priority > highest_priority) {
            highest_priority = processes[i].priority;
            highest_priority_idx = i;
        }
    }

    return highest_priority_idx;
}

// Function to implement the preemptive priority scheduling algorithm
void preemptivePriorityScheduling(struct Process processes[], int n) {
    int total_time = 0;
    int completed = 0;

    while (completed < n) {
        int idx = findHighestPriorityProcess(processes, n);

        if (idx == -1) {
            total_time++;
            continue;
        }

        processes[idx].remaining_time--;

        if (processes[idx].remaining_time == 0) {
            completed++;
            printf("Process %d completed at time %d\n", processes[idx].id, total_time);
        }

        total_time++;
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    preemptivePriorityScheduling(processes, n);

    return 0;
}
