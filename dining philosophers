#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[N];
sem_t mutex;
sem_t forks[N];

void test(int i) {
    if (state[i] == HUNGRY && state[(i + 4) % N] != EATING && state[(i + 1) % N] != EATING) {
        state[i] = EATING;
        sem_post(&forks[i]);
    }
}

void take_fork(int i) {
    sem_wait(&mutex);
    state[i] = HUNGRY;
    test(i);
    sem_post(&mutex);
    sem_wait(&forks[i]);
}

void put_fork(int i) {
    sem_wait(&mutex);
    state[i] = THINKING;
    test((i + 4) % N);
    test((i + 1) % N);
    sem_post(&mutex);
}

void* philosopher(void* arg) {
    int i = ((int)arg);
    while (1) {
        printf("Philosopher %d is thinking.\n", i);
        sleep(2);
        take_fork(i);
        printf("Philosopher %d is eating.\n", i);
        sleep(1);
        put_fork(i);
    }
}

int main() {
    pthread_t philosophers[N];
    int ids[N];
    sem_init(&mutex, 0, 1);
    for (int i = 0; i < N; i++) {
        sem_init(&forks[i], 0, 0);
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }
    return 0;
}
